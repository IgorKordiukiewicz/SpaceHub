@page "/news"
@inject HttpClient _httpClient
@using Application.Features.News;
@using MudBlazor
@using SpaceHub.Web.Shared;

@if(_viewModel is not null)
{
    <MudGrid Class="d-flex align-stretch">
        <MudItem xs="12">
            <MudTextField Label="Search" T="string" TextChanged="OnSearchChanged"
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>

        @foreach (var article in _viewModel.Articles)
        {
            <MudItem md="6" xs="12">
                <MudPaper Height="100%">
                    <MudLink Href="@article.Url" Underline="Underline.None" Target="_blank">
                        <MudCard Height="100%" Class="d-flex flex-column">
                            <MudCardMedia Image="@article.ImageUrl" />
                            <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="py-2 px-4">@article.Title</MudText>
                            <MudText Typo="Typo.body2" Align="Align.Center" Class="px-4">@article.Summary</MudText>
                            <div class="mt-auto pt-4">
                                <MudDivider />
                                <MudContainer Class="d-flex justify-space-between py-2">
                                    <MudText Typo="Typo.body2">@article.NewsSite</MudText>
                                    <MudText Typo="Typo.body2">@article.PublishDate.ToString("D")</MudText>
                                </MudContainer>
                            </div>
                        </MudCard>
                    </MudLink>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <div class="d-flex flex-column align-center my-8">
        <MudPagination Count="@_viewModel.TotalPagesCount" Size="Size.Large" SelectedChanged="OnPageChanged"/>
    </div>
}

@code {
    [Inject]
    private IJSRuntime _jsRuntime { get; set; }

    private GetNewsResult _viewModel;

    private string? _searchValue = null;
    private int _pageNumber = 1;
    private int _itemsPerPage = 10;

    protected override async Task OnInitializedAsync()
    {
        await UpdateArticles();
    }

    private async Task UpdateArticles()
    {
        var url = new UrlBuilder("api/space/articles")
            .AddParameter("searchValue", _searchValue)
            .AddParameter("pageNumber", _pageNumber)
            .AddParameter("itemsPerPage", _itemsPerPage)
            .Url;
        _viewModel = await _httpClient.GetFromJsonAsync<GetNewsResult>(url);
    }

    private async Task OnSearchChanged(string searchValue)
    {
        _searchValue = searchValue;
        await UpdateArticles();
    }

    private async Task OnPageChanged(int pageNumber)
    {
        _pageNumber = pageNumber;
        await UpdateArticles();
        await _jsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }
}
