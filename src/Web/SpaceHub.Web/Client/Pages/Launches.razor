@page "/launches"
@inject HttpClient _httpClient
@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Contracts.Enums;
@using SpaceHub.Web.Client.Utils;
@using System.Timers;
@using System.Net;

<style>
    @@media only screen and (max-width: 1280px) {
        .launch_img {
            width: 100%;
            height: auto;
        }

        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-top-right-radius: var(--mud-default-borderradius) !important;
        }
    }

    @@media only screen and (min-width: 1280px) {
        .launch_img {
            width: 100%;
            height: 100%;
            max-height: 250px;
        }

        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-bottom-left-radius: var(--mud-default-borderradius) !important;
        }
    }
</style>

@if(_viewModel is not null)
{
    <MudGrid Class="d-flex">
        <MudItem xs="12" Class="pb-0">
            <MudRadioGroup T="ETimeFrame" SelectedOptionChanged="OnTimeFrameChanged" SelectedOption="_timeFrame">
                <MudRadio Option="ETimeFrame.Upcoming" Color="Color.Success">Upcoming</MudRadio>
                <MudRadio Option="ETimeFrame.Previous" Color="Color.Error">Previous</MudRadio>
            </MudRadioGroup>
        </MudItem>
        <MudItem xs="12" Class="pt-0">
            <MudTextField Label="Search" T="string" TextChanged="OnSearchChanged"
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>
            @foreach (var launch in _viewModel.Launches)
            {
                <MudItem xs="12" Class="mb-10">
                <MudPaper Style="background-color: var(--mud-palette-dark);">
                        <MudPaper>
                        <MudGrid>
                            <MudItem md="12" lg="3" Class="d-flex justify-center py-0">
                                <MudImage Src="@launch.ImageUrl" ObjectFit="ObjectFit.Cover" Class="card_img_rounded launch_img" />
                            </MudItem>
                            <MudItem md="12" lg="8">
                                <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center">
                                    @launch.Name
                                </MudText>
                                <MudText Typo="Typo.body1" Align="Align.Center">
                                    <b>@launch.AgencyName | @launch.PadLocationName | @launch.Date.GetValueOrDefault().ToString("d")</b>
                                </MudText>
                                <MudText Typo="Typo.body2" Align="Align.Center" Class="py-1">
                                    @launch.MissionDescription
                                </MudText>
                                <MudDivider/>
                                <MudText Typo="Typo.h3" Align="Align.Center" Class="pt-1">
                                    @if(launch.Upcoming)
                                    {
                                        @launch.TimeToLaunch?.ToString("dd\\:hh\\:mm\\:ss")
                                    }
                                    else
                                    {
                                        @launch.Date
                                    }
                                </MudText>
                                <MudText Typo="Typo.h5" Align="Align.Center" Color="@StatusColor(launch.Status)">
                                    (@launch.Status)
                                </MudText>
                            </MudItem>
                            <MudItem md="12" lg="1" Class="d-flex align-content-end flex-wrap justify-center">
                                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="(e) => ToggleLaunchDetails(launch.Id)" />
                            </MudItem>
                        </MudGrid>
                        </MudPaper>
                        @if(_launchesDetails.TryGetValue(launch.Id, out var details) && details.Visible)
                        {
                            if(details.Data is not null)
                            {
                                <MudGrid>
                                    <MudItem xs="12" Class="mx-6 mt-8 mb-2">
                                    <MudPaper>
                                        <MudGrid>
                                            <MudItem md="12" lg="3" Class="d-flex justify-center py-0">
                                                <MudImage Src="@details.Data.Agency.ImageUrl" ObjectFit="ObjectFit.ScaleDown" Fluid="true" Class="card_img_rounded" />
                                            </MudItem>
                                            <MudItem md="12" lg="9">
                                                <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                                                    @details.Data.Agency.Name
                                                </MudText>
                                                <MudText Typo="Typo.body2" Align="Align.Center">
                                                    @details.Data.Agency.Description
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" Class="mx-6 mt-2 mb-4">
                                        <MudPaper>
                                        <MudGrid>
                                            <MudItem md="12" lg="3" Class="d-flex justify-center py-0">
                                                <MudImage Src="@details.Data.Rocket.ImageUrl" ObjectFit="ObjectFit.Cover" Fluid="true" Class="card_img_rounded" />
                                            </MudItem>
                                            <MudItem md="12" lg="9">
                                                <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                                                    @details.Data.Rocket.Name
                                                </MudText>
                                                <MudText Typo="Typo.body2" Align="Align.Center" Class="pb-2">
                                                    @details.Data.Rocket.Description
                                                </MudText>
                                                <MudDivider/>
                                                <MudGrid Class="py-2 px-4">
                                                    @foreach (var (name, value, symbol) in details.Data.Rocket.Properties)
                                                    {
                                                        <MudItem xs="3">
                                                            <MudText Typo="Typo.body1">
                                                                @name
                                                            </MudText>
                                                        </MudItem>
                                                        <MudItem xs="3">
                                                            <MudText Typo="Typo.body1" Align="Align.End">
                                                                @GetPropertyValueDisplay(value, symbol)
                                                            </MudText>
                                                        </MudItem>
                                                    }
                                                </MudGrid>
                                            </MudItem>
                                            
                                        </MudGrid>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            }
                            else
                            {
                                <div class="d-flex justify-center flex-grow pt-8 pb-4">
                                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                                </div>
                            }
                        }
                    </MudPaper>
                </MudItem>
            }

        <div class="d-flex flex-column align-center my-8">
            <MudPagination Count="@_viewModel.TotalPagesCount" Size="Size.Large" SelectedChanged="OnPageChanged" />
        </div>
    </MudGrid>
}

@code {
    [Inject]
    private IJSRuntime _jsRuntime { get; set; }

    private LaunchesVM? _viewModel;

    private ETimeFrame _timeFrame = ETimeFrame.Upcoming;
    private string? _searchValue = null;
    private int _pageNumber = 1;
    private int _itemsPerPage = 10;

    private Timer _timer = new(1000);

    private class LaunchDetails
    {
        public LaunchDetailsVM? Data { get; set; }
        public bool Visible { get; set; } = false;
    }

    private Dictionary<string, LaunchDetails> _launchesDetails = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateLaunches();

        _timer.Elapsed += UpdateCountdownTimers;
        _timer.Start();
    }

    private void UpdateCountdownTimers(object? sender, ElapsedEventArgs e)
    {
        if(_viewModel is null)
        {
            return;
        }

        var now = DateTime.Now;
        foreach(var launch in _viewModel.Launches)
        {
            if(launch.Date is null)
            {
                continue;
            }

            if(launch.Date < now)
            {
                launch.TimeToLaunch = TimeSpan.FromMinutes(0.0);
            }
            else
            {
                launch.TimeToLaunch = launch.Date.Value - now;
            }
        }

        StateHasChanged();
    }

    private async Task UpdateLaunches()
    {
        var url = new UrlBuilder("api/launches")
            .AddParameter("timeFrame", _timeFrame)
            .AddParameter("searchValue", _searchValue)
            .AddParameter("pageNumber", _pageNumber)
            .AddParameter("itemsPerPage", _itemsPerPage)
            .Url;
        // TODO: Move request handling to helper class
        var response = await _httpClient.GetAsync(url);
        if(response.IsSuccessStatusCode)
        {
            _viewModel = await _httpClient.GetFromJsonAsync<LaunchesVM>(url);
        }
        else if(response.StatusCode == HttpStatusCode.BadRequest)
        {
            // TODO: Bad request - pop-up or ?
        }
    }

    private async Task OnTimeFrameChanged(ETimeFrame timeFrame)
    {
        _timeFrame = timeFrame;
        await UpdateLaunches();
    }

    private async Task OnSearchChanged(string searchValue)
    {
        _searchValue = searchValue;
        await UpdateLaunches();
    }

    private async Task OnPageChanged(int pageNumber)
    {
        _pageNumber = pageNumber;
        await UpdateLaunches();
        await _jsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private Color StatusColor(string status) => status.ToLower() switch
    {
        "go for launch" or "launch successful" => Color.Success,
        "to be confirmed" or "to be determined" => Color.Warning,
        "launch failure" => Color.Error,
        _ => Color.Default
    };

    private async Task ToggleLaunchDetails(string id)
    {
        if(!_launchesDetails.TryGetValue(id, out var launchDetails))
        {
            _launchesDetails.Add(id, new LaunchDetails()
            {
                Data = null,
                Visible = true
            });
            StateHasChanged();

            var url = new UrlBuilder("api/launches/" + id).Url;
            var response = await _httpClient.GetAsync(url);
            if(response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<LaunchDetailsVM>();
                _launchesDetails[id].Data = data;
            }
            else if(response.StatusCode == HttpStatusCode.NotFound)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                // TODO: Display pop-up & hide the expandable view?
            }
        }   
        else
        {
            launchDetails.Visible = !launchDetails.Visible;
        }
    }

    private string GetPropertyValueDisplay(string value, string? symbol)
    {
        return value + (symbol is null ? "" : " " + symbol);
    }
}
