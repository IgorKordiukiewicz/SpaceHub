@page "/launches"
@inject HttpClient _httpClient
@using Application.Enums;
@using Application.Features.Launches;
@using MediatR;
@using MudBlazor

@if(_viewModel is not null)
{
    <MudGrid Class="d-flex">
        <MudItem xs="12" Class="pb-0">
            <MudRadioGroup T="ETimeFrame" SelectedOptionChanged="OnTimeFrameChanged" SelectedOption="_timeFrame">
                <MudRadio Option="ETimeFrame.Upcoming" Color="Color.Success">Upcoming</MudRadio>
                <MudRadio Option="ETimeFrame.Previous" Color="Color.Error">Previous</MudRadio>
            </MudRadioGroup>
        </MudItem>
        <MudItem xs="12" Class="pt-0">
            <MudTextField Label="Search" T="string" TextChanged="OnSearchChanged"
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>

        @foreach(var launch in _viewModel.Launches)
        {
            <MudItem xs="12" Class="mb-10">
                <MudPaper>
                    <MudGrid>
                        <MudItem xs="3" Class="py-0">
                            <MudImage Fluid="true" Src="@launch.ImageUrl" ObjectFit="ObjectFit.Cover" Class="rounded-start" Style="height: 100%; width: 100%;"/>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Typo="Typo.h3" Align="Align.Center">
                                @launch.Name
                            </MudText>
                            <MudDivider />
                            <MudText Typo="Typo.body1" Align="Align.Center">
                                Mission
                            </MudText>
                            <MudDivider />
                            <MudText Typo="Typo.h4" Color="@StatusColor(launch.StatusAbbrevation)" Align="Align.Center">
                                @launch.StatusName
                            </MudText>
                            <MudText Typo="Typo.body1" Align="Align.Center">
                                @launch.StatusDescription
                            </MudText>
                            <MudText Typo="Typo.h5" Align="Align.Center">
                                @launch.Date
                            </MudText>
                            @if(launch.WindowStart is not null && launch.WindowEnd is not null)
                            {
                                <MudText Typo="Typo.body1" Align="Align.Center">
                                    @launch.WindowStart - @launch.WindowEnd
                                </MudText>
                            }
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        }

        <div class="d-flex flex-column align-center my-8">
            <MudPagination Count="@_viewModel.TotalPagesCount" Size="Size.Large" SelectedChanged="OnPageChanged" />
        </div>
    </MudGrid>
}

@code {
    [Inject]
    private IJSRuntime _jsRuntime { get; set; }

    private GetLaunchesResult _viewModel;

    private ETimeFrame _timeFrame = ETimeFrame.Upcoming;
    private string? _searchValue = null;
    private int _pageNumber = 1;
    private int _itemsPerPage = 10;

    protected override async Task OnInitializedAsync()
    {
        await UpdateLaunches();
    }

    private async Task UpdateLaunches()
    {
        _viewModel = await _httpClient.GetFromJsonAsync<GetLaunchesResult>($"api/space/launches?timeFrame={_timeFrame}&searchValue={_searchValue}&pageNumber={_pageNumber}&itemsPerPage={_itemsPerPage}");
    }

    private async Task OnTimeFrameChanged(ETimeFrame timeFrame)
    {
        _timeFrame = timeFrame;
        await UpdateLaunches();
    }

    private async Task OnSearchChanged(string searchValue)
    {
        _searchValue = searchValue;
        await UpdateLaunches();
    }

    private async Task OnPageChanged(int pageNumber)
    {
        _pageNumber = pageNumber;
        await UpdateLaunches();
        await _jsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private Color StatusColor(string status) => status.ToLower() switch
    {
        "go" or "success" => Color.Success,
        "tbc" or "tbd" => Color.Warning,
        _ => Color.Default
    };
}
