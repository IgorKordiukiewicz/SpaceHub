@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
<style>
    @@media only screen and (max-width: 1280px) {
        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-top-right-radius: var(--mud-default-borderradius) !important;
        }
    }

    @@media only screen and (min-width: 1280px) {
        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-bottom-left-radius: var(--mud-default-borderradius) !important;
        }
    }
</style>

<MudItem xs="12" Class="@GetItemClass()">
    <MudPaper>
        <MudGrid>
            <MudItem md="12" lg="3" Class="d-flex justify-center py-0">
                <MudImage Src="@Rocket.ImageUrl" ObjectFit="ObjectFit.Cover" Fluid="true" Class="card_img_rounded" />
            </MudItem>
            <MudItem md="12" lg="9">
                <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                    @Rocket.Name
                </MudText>
                <MudText Typo="Typo.body2" Align="Align.Center" Class="pb-2 px-2">
                    @Rocket.Description
                </MudText>
                <MudDivider/>
                <MudGrid Class="py-2 px-4">
                    <RocketProperty Name="Family" Value="@Rocket.Family" />
                    <RocketProperty Name="Variant" Value="@Rocket.Variant" />
                    <RocketProperty Name="Length" Value="@FormatValue(Rocket.Length)" UnitSymbol="m" />
                    <RocketProperty Name="Diameter" Value="@FormatValue(Rocket.Diameter)" UnitSymbol="m" />
                    <RocketProperty Name="Max Stages" Value="@FormatValue(Rocket.MaxStages)" />
                    <RocketProperty Name="LaunchCost" Value="@FormatValue(Rocket.LaunchCost)" UnitSymbol="$" />
                    <RocketProperty Name="Liftoff Mass" Value="@FormatValue(Rocket.LiftoffMass)" UnitSymbol="T" />
                    <RocketProperty Name="Liftoff Thrust" Value="@FormatValue(Rocket.LiftoffThrust)" UnitSymbol="kN" />
                    <RocketProperty Name="Leo Capacity" Value="@FormatValue(Rocket.LeoCapacity)" UnitSymbol="kg" />
                    <RocketProperty Name="Geo Capacity" Value="@FormatValue(Rocket.GeoCapacity)" UnitSymbol="kg" />
                    <RocketProperty Name="Cost per kg to Leo" Value="@FormatValue(Rocket.CostPerKgToLeo)" UnitSymbol="$" />
                    <RocketProperty Name="Cost per kg to Geo" Value="@FormatValue(Rocket.CostPerKgToGeo)" UnitSymbol="$" />
                    <RocketProperty Name="Successful Launches" Value="@FormatValue(Rocket.SuccessfulLaunches)" />
                    <RocketProperty Name="Total Launches" Value="@FormatValue(Rocket.TotalLaunches.ToString())" />
                    <RocketProperty Name="Launch Success" Value="@Rocket.LaunchSuccess.ToString()" UnitSymbol="%"/>
                    <RocketProperty Name="First Flight" Value="@Rocket.FirstFlight.ToString()" />
                </MudGrid>
            </MudItem>

        </MudGrid>
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public bool Nested { get; set; }

    [Parameter]
    public RocketVM Rocket { get; set; }

    private string GetItemClass() => Nested ? "mx-6 mt-2 mb-4" : "mb-10";

    private string FormatValue<T>(T? value) => string.Format("{0:#,0.##}", value);
}
