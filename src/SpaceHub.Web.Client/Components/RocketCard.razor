@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
<style>
    @@media only screen and (max-width: 1280px) {
        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-top-right-radius: var(--mud-default-borderradius) !important;
        }
    }

    @@media only screen and (min-width: 1280px) {
        .card_img_rounded {
            border-top-left-radius: var(--mud-default-borderradius) !important;
            border-bottom-left-radius: var(--mud-default-borderradius) !important;
        }
    }
</style>

<MudItem xs="12" Class="@GetItemClass()">
    <MudPaper>
        <MudGrid>
            <MudItem md="12" lg="3" Class="d-flex justify-center py-0">
                <MudImage Src="@Rocket.ImageUrl" ObjectFit="ObjectFit.Cover" Fluid="true" Class="card_img_rounded" />
            </MudItem>
            <MudItem md="12" lg="9">
                <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">
                    @Rocket.Name
                </MudText>
                <MudText Typo="Typo.body2" Align="Align.Center" Class="pb-2 px-2">
                    @Rocket.Description
                </MudText>
                <MudDivider/>
                <MudGrid Class="py-2 px-4">
                    <RocketProperty Name="Family" Value="@Rocket.Family" />
                    <RocketProperty Name="Variant" Value="@Rocket.Variant" />
                    <RocketProperty Name="Length" Value="@Rocket.Length.ToString()" UnitSymbol="m" />
                    <RocketProperty Name="Diameter" Value="@Rocket.Diameter.ToString()"  UnitSymbol="m"/>
                    <RocketProperty Name="Max Stages" Value="@Rocket.MaxStages.ToString()" />
                    <RocketProperty Name="LaunchCost" Value="@Rocket.LaunchCost.ToString()" UnitSymbol="$" />
                    <RocketProperty Name="Liftoff Mass" Value="@Rocket.LiftoffMass.ToString()" UnitSymbol="T" />
                    <RocketProperty Name="Liftoff Thrust" Value="@Rocket.LiftoffThrust.ToString()" UnitSymbol="kN" />
                    <RocketProperty Name="Leo Capacity" Value="@Rocket.LeoCapacity.ToString()" UnitSymbol="kg" />
                    <RocketProperty Name="Geo Capacity" Value="@Rocket.GeoCapacity.ToString()" UnitSymbol="kg" />
                    <RocketProperty Name="Cost per kg to Leo" Value="@Rocket.CostPerKgToLeo.ToString()" UnitSymbol="$" />
                    <RocketProperty Name="Cost per kg to Geo" Value="@Rocket.CostPerKgToGeo.ToString()" UnitSymbol="$" />
                    <RocketProperty Name="Successful Launches" Value="@Rocket.SuccessfulLaunches.ToString()" />
                    <RocketProperty Name="Total Launches" Value="@Rocket.TotalLaunches.ToString()" />
                    <RocketProperty Name="Launch Success" Value="@Rocket.LaunchSuccess.ToString()" UnitSymbol="%"/>
                    <RocketProperty Name="First Flight" Value="@Rocket.FirstFlight.ToString()" />
                </MudGrid>
            </MudItem>

        </MudGrid>
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public bool Nested { get; set; }

    [Parameter]
    public RocketVM Rocket { get; set; }

    private string GetPropertyValueDisplay(string value, string? symbol)
    {
        return value + (symbol is null ? "" : " " + symbol);
    }

    private string GetItemClass()
    {
        return Nested ? "mx-6 mt-2 mb-4" : "mb-10";
    }
}
