@using MudBlazor;
@using System.Net;
@using System.Text.Json;
@using System.Text;

@code {
    // Dependencies have to be manually passed from parent component, because [Inject]/@Inject injects them after parent initialization
    private readonly HttpClient _httpClient;
    private readonly IDialogService _dialogService;

    public RequestHandler(HttpClient httpClient, IDialogService dialogService)
    {
        _httpClient = httpClient;
        _dialogService = dialogService;
    }

    public async Task<TResponse?> HandleAPIRequest<TResponse>(string url) where TResponse : class
    {
        return await GetResponseContent<TResponse>(await _httpClient.GetAsync(url));
    }

    public async Task<TResponse?> HandleAPIRequest<TResponse, TBody>(string url, TBody body) where TResponse : class
    {
        var bodyJson = JsonSerializer.Serialize(body);
        var content = new StringContent(bodyJson, Encoding.UTF8, "application/json");
        Console.WriteLine(bodyJson);

        return await GetResponseContent<TResponse>(await _httpClient.PostAsync(url, content));
    }

    private async Task<TResponse?> GetResponseContent<TResponse>(HttpResponseMessage response) where TResponse : class
    {
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<TResponse>();
        }
        else
        {
            await DisplayErrorMessageBox(response);
            return null;
        }
    }

    private async Task DisplayErrorMessageBox(HttpResponseMessage response)
    {
        var message = response.StatusCode != HttpStatusCode.InternalServerError ? await response.Content.ReadAsStringAsync() : string.Empty;
        await _dialogService.ShowMessageBox($"{(int)response.StatusCode} {response.ReasonPhrase}", message);
    }
}
