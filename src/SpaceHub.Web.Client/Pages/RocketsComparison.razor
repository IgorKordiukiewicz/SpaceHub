@page "/rockets/comparison"
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.RadarChart;
@using ChartJs.Blazor.Util;
@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components;
@using SpaceHub.Web.Client.Utils;

@if(_rocketsComparisonMeta is not null)
{
<MudGrid>
    <MudItem xs="12" lg="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudForm Class="gap-4 d-flex flex-wrap mb-4">
                <MudSelect @ref="_groupTypeSelect" T="GroupType" Variant="Variant.Outlined" @bind-Value="@_groupType">
                    <MudSelectItem Value="@GroupType.Individual" />
                    <MudSelectItem Value="@GroupType.Family" />
                    <MudSelectItem Value="@GroupType.All" Disabled="IsGroupTypeAllSelectItemDisabled()" />
                </MudSelect>
                @switch (_groupType)
                {
                    case GroupType.All:
                        break;
                    case GroupType.Family:
                        {
                            <MudAutocomplete @ref="_familyNameAutocomplete" @bind-Value="@_familyName" T="string" Label="Select Family" 
                            SearchFunc="@SearchFamilies"  Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    case GroupType.Individual:
                        {
                            <MudAutocomplete @ref="_rocketNameAutocomplete" @bind-Value="@_rocketName" T="string" Label="Select Rocket" 
                            SearchFunc="@SearchRockets" Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    default:
                        break;
                }
                <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="OnComparisonGroupAdded" Disabled="IsAddingNewComparisonGroupDisabled()">Add</MudButton>
            </MudForm>
            <MudDivider />
            <MudList Clickable="false">
                @foreach (var comparisonGroup in _comparisonGroups)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Circle" IconColor="Color.Primary">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.subtitle1">@GetComparisonGroupTitle(comparisonGroup)</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="(e) => OnDeleteGroupButtonClicked(comparisonGroup, e)"></MudIconButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="9">
        <MudPaper Style="width: 100%; height: 100%;">
            <Chart Config="_config"></Chart>
        </MudPaper>
    </MudItem>
</MudGrid>
}

@code {
    private RadarConfig _config;
    private RocketsComparisonMetaVM? _rocketsComparisonMeta;
    private RequestHandler _requestHandler = null!;

    private MudAutocomplete<string> _familyNameAutocomplete;
    private MudAutocomplete<string> _rocketNameAutocomplete;
    private MudSelect<GroupType> _groupTypeSelect;

    private int _maxGroups = 5;

    public enum GroupType
    {
        Individual,
        Family,
        All
    }
    private GroupType _groupType = GroupType.Individual;

    private string? _familyName;
    private List<string> _familiesNames = new();

    private string? _rocketName;
    private List<string> _rocketsNames = new();

    private class ComparisonGroup
    {
        public GroupType Type { get; set; }

        public string? FamilyName { get; set; }
        public string? RocketName { get; set; }
        public int? RocketId { get; set; }

        public int RocketsCount { get; set; }
    }
    private List<ComparisonGroup> _comparisonGroups = new();

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        var url = new UrlBuilder("api/rockets/comparison_meta").Url;

        _rocketsComparisonMeta = await _requestHandler.HandleAPIRequest<RocketsComparisonMetaVM>(url);

        if(_rocketsComparisonMeta is not null)
        {
            _familiesNames = _rocketsComparisonMeta.FamilyGroupsWithItemsCount.Select(x => x.Key).ToList();
            _rocketsNames = _rocketsComparisonMeta.RocketNamesWithId.Select(x => x.Key).ToList();
        }

        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new RadarConfig
            {
                Options = new RadarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Rocket Properties"
                    },
                    Scale = new ChartJs.Blazor.Common.Axes.LinearRadialAxis()
                    {
                        Ticks = new ChartJs.Blazor.Common.Axes.Ticks.LinearRadialTicks()
                        {
                            Min = 0.0,
                            Max = 1.0
                        }
                    },
                    Tooltips = new()
                    {

                    },
                }
            };

        foreach (string color in new[] { "Prop1", "Prop2", "Prop3", "Prop4", "Prop5", "Prop5", "Prop6" })
        {
            _config.Data.Labels.Add(color);
        }

        RadarDataset<float> dataset = new RadarDataset<float>(new[] { 0.7F, 0.59F, 0.9F, 0.17F, 0.56F, 0.55F, 0.40F });
        dataset.BackgroundColor = ColorUtil.ColorString(255, 99, 132, 0.2);
        dataset.BorderColor = ColorUtil.ColorString(255, 99, 132);

        RadarDataset<float> dataset2 = new RadarDataset<float>(new[] { 0.56F, 0.82F, 0.75F, 0.44F, 0.58F, 0.70F, 0.60F });
        dataset2.BackgroundColor = ColorUtil.ColorString(99, 132, 255, 0.2);
        dataset2.BorderColor = ColorUtil.ColorString(99, 132, 255);

        _config.Data.Datasets.Add(dataset);
        _config.Data.Datasets.Add(dataset2);
    }

    private void OnComparisonGroupAdded()
    {
        if(IsAddingNewComparisonGroupDisabled())
        {
            return;
        }

        var comparisonGroup = new ComparisonGroup() { Type = _groupType };
        switch(comparisonGroup.Type)
        {
            case GroupType.All:
                {
                    comparisonGroup.RocketsCount = _rocketsComparisonMeta.TotalCount;

                    _groupTypeSelect.SelectOption(GroupType.Individual);
                    break;
                }
            case GroupType.Family:
                {
                    comparisonGroup.FamilyName = _familyName;
                    comparisonGroup.RocketsCount = _rocketsComparisonMeta.FamilyGroupsWithItemsCount.First(x => x.Key == _familyName).Value;

                    _familyNameAutocomplete.Clear();
                    break;
                }
            case GroupType.Individual:
                {
                    comparisonGroup.RocketName = _rocketName;
                    comparisonGroup.RocketId = _rocketsComparisonMeta.RocketNamesWithId.First(x => x.Key == _rocketName).Value;

                    _rocketNameAutocomplete.Clear();
                    break;
                }
            default:
                break;
        }

        _comparisonGroups.Add(comparisonGroup);
    }

    private string GetComparisonGroupTitle(ComparisonGroup comparisonGroup) => comparisonGroup.Type switch
    {
        GroupType.All => $"All ({comparisonGroup.RocketsCount})",
        GroupType.Family => $"Family: {comparisonGroup.FamilyName} ({comparisonGroup.RocketsCount})",
        GroupType.Individual => $"{comparisonGroup.RocketName}",
    };

    private async Task<IEnumerable<string>> SearchFamilies(string value)
    {
        var filteredNames = _familiesNames.Except(_comparisonGroups.Where(x => x.Type == GroupType.Family).Select(x => x.FamilyName));

        if(string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchRockets(string value)
    {
        var filteredNames = _rocketsNames.Except(_comparisonGroups.Where(x => x.Type == GroupType.Individual).Select(x => x.RocketName));

        if (string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void OnDeleteGroupButtonClicked(ComparisonGroup comparisonGroup, MouseEventArgs e)
    {
        _comparisonGroups.Remove(comparisonGroup);
    }

    private bool IsAddingNewComparisonGroupDisabled()
    {
        if(_rocketsComparisonMeta is null)
        {
            return true;
        }

        var disabledForType = _groupType switch
        {
            GroupType.All => _comparisonGroups.Any(x => x.Type == GroupType.All),
            GroupType.Family => _comparisonGroups.Any(x => x.Type == GroupType.Family && x.FamilyName == _familyName)
                || !_rocketsComparisonMeta.FamilyGroupsWithItemsCount.ContainsKey(_familyName ?? string.Empty),
            GroupType.Individual => _comparisonGroups.Any(x => x.Type == GroupType.Individual && x.RocketName == _rocketName)
                || !_rocketsComparisonMeta.RocketNamesWithId.ContainsKey(_rocketName ?? string.Empty),
        };

        return _comparisonGroups.Count >= _maxGroups || disabledForType;
    }

    private bool IsGroupTypeAllSelectItemDisabled() => _comparisonGroups.Any(x => x.Type == GroupType.All);
}
