@page "/rockets/comparison"
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Axes.Ticks;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Common.Handlers;
@using ChartJs.Blazor.Interop;
@using ChartJs.Blazor.RadarChart;
@using ChartJs.Blazor.Util;
@using MudBlazor
@using SpaceHub.Contracts.Enums;
@using SpaceHub.Contracts.Models;
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components;
@using SpaceHub.Web.Client.Utils;
@using System.Text.Json;
@using System.Text;
@using System.Globalization;

@if(_rocketsComparisonMeta is not null)
{
<MudGrid Class="mt-3">
    <MudItem xs="12" lg="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudForm Class="gap-4 d-flex flex-wrap mb-4">
                <MudAutocomplete @ref="_rocketNameAutocomplete" @bind-Value="@_rocketName" T="string" Label="Select Rocket"
                             SearchFunc="@SearchRockets" Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="OnAddDatasetClicked" Disabled="IsAddingNewDatasetDisabled()">Add</MudButton>
                @if (!IsRocketNameInputInvalid() && IsLimitOfDatasetsReached())
                {
                    <MudAlert Severity="Severity.Warning" Style="width: 100%;" Dense="true">
                        Reached a maximum of <text>@_maxDatasets</text> datasets
                    </MudAlert>
                }
            </MudForm>
            <MudDivider />
            <MudList Clickable="false">
                @foreach (var dataset in _datasets)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Circle" IconColor="@dataset.Color">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.subtitle1">@dataset.Title</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="(e) => OnDeleteDatasetButtonClicked(dataset, e)"></MudIconButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="9">
        <MudPaper Style="width: 100%; height: 100%;" Class="py-4">
            <Chart @ref="_chart" Config="_config">
            </Chart>
        </MudPaper>
    </MudItem>

    @foreach(var propertyType in Enum.GetValues<ERocketComparisonProperty>())
    {
        <MudItem xs="12" lg="4">
            <MudPaper>
                <MudPaper Style="background-color: var(--mud-palette-dark);">
                        <MudText Typo="Typo.h5" Class="pa-3" Align="Align.Center">@propertyType.ToUserFriendlyString()</MudText>
                </MudPaper>
                <MudTimeline TimelinePosition="TimelinePosition.Start">  
                    @foreach (var (text, color) in GetPropertyDetailsItems(propertyType))
                    {
                        <MudTimelineItem Color="@color">
                            <MudText>
                                @text
                            </MudText>
                        </MudTimelineItem>
                    }
                </MudTimeline>
            </MudPaper>
        </MudItem>
    }
</MudGrid>
}

@code {
    private RocketsComparisonMetaVM? _rocketsComparisonMeta;

    private Chart? _chart;
    private RadarConfig _config = null!;
    private RequestHandler _requestHandler = null!;
    private MudAutocomplete<string>? _rocketNameAutocomplete;

    private int _topValuesCount = 3;
    private int _maxDatasets = 3;
    private Dictionary<Color, bool> _datasetColorsAvailability = new()
    {
        { Color.Primary, true },
        { Color.Secondary, true },
        { Color.Tertiary, true },
    };

    private string? _rocketName;
    private List<string> _rocketsNames = new();

    private class DatasetDisplay
    {
        public required ComparisonDataset Dataset { get; init; }
        public required string Title { get; init; }
        public required Color Color { get; init; }
        public IReadOnlyDictionary<ERocketComparisonProperty, RocketComparisonDatasetVM>? DataByProperty { get; set; }
    }
    private List<DatasetDisplay> _datasets = new();

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        var url = new UrlBuilder("api/rockets/comparison_meta").AddParameter("topValuesCount", _topValuesCount).Url;

        _rocketsComparisonMeta = await _requestHandler.HandleAPIRequest<RocketsComparisonMetaVM>(url);

        if(_rocketsComparisonMeta is not null)
        {
            _rocketsNames = _rocketsComparisonMeta.RocketIdsByName.Select(x => x.Key).ToList();
        }

        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new RadarConfig
        {
            Options = new RadarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Scale = new LinearRadialAxis
                {
                    Ticks = new LinearRadialTicks
                    {
                        Min = 0.0,
                        Max = 1.0,
                        ShowLabelBackdrop = false,
                        FontColor = ColorUtil.ColorString(150, 150, 150, 0.8),
                        FontSize = 12,
                    },
                    PointLabels = new PointLabels
                    {
                        FontColor = ColorUtil.ColorString(150, 150, 150, 1.0),
                        FontSize = 14,
                    },
                },
                Legend = new Legend
                {
                    Display = false,
                },
                Tooltips = new Tooltips
                {
                    Enabled = false
                },
            },
        };

        foreach (var rocketPropertyType in Enum.GetValues<ERocketComparisonProperty>())
        {
            _config.Data.Labels.Add(rocketPropertyType.ToUserFriendlyString());
        }
    }

    private async Task OnAddDatasetClicked()
    {
        if(IsAddingNewDatasetDisabled())
        {
            return;
        }

        var color = _datasetColorsAvailability.First(x => x.Value).Key;
        _datasetColorsAvailability[color] = false;

        _datasets.Add(new()
        {
            Dataset = new ComparisonDataset()
            {
                Id = Guid.NewGuid(),
                RocketId = _rocketsComparisonMeta!.RocketIdsByName.First(x => x.Key == _rocketName).Value,
                RocketName = _rocketName!
            },
            Title = _rocketName!,
            Color = color
        });

        await _rocketNameAutocomplete!.Clear();
        _rocketName = null;

        await UpdateChart();
    }

    private async Task<IEnumerable<string>> SearchRockets(string value)
    {
        var filteredNames = _rocketsNames.Except(_datasets.Select(x => x.Dataset.RocketName));
        if (string.IsNullOrEmpty(value))
        {
            return filteredNames!;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnDeleteDatasetButtonClicked(DatasetDisplay dataset, MouseEventArgs e)
    {
        _datasetColorsAvailability[dataset.Color] = true;
        _datasets.Remove(dataset);

        await UpdateChart();
    }

    private bool IsAddingNewDatasetDisabled() 
        => IsLimitOfDatasetsReached() || IsRocketNameInputInvalid();

    private bool IsLimitOfDatasetsReached() 
        => _datasets.Count >= _maxDatasets;

    private bool IsRocketNameInputInvalid()
    {
        return _rocketsComparisonMeta is null 
            ||_datasets.Any(x => x.Dataset.RocketName == _rocketName)
            || !_rocketsComparisonMeta.RocketIdsByName.ContainsKey(_rocketName ?? string.Empty)
            || _rocketNameAutocomplete is null;
    }

    private async Task UpdateChart()
    {
        if(_chart is null)
        {
            return;
        }

        var url = new UrlBuilder("api/rockets/comparison").Url;
        var chartVM = await _requestHandler.HandleAPIRequest<RocketsComparisonVM, IEnumerable<ComparisonDataset>>(url, _datasets.Select(x => x.Dataset));
        if(chartVM is null)
        {
            return;
        }

        _config.Data.Datasets.Clear();
        foreach(var (id, data) in chartVM.DatasetsById)
        {
            var chartDataset = new RadarDataset<double>();
            // TODO: Add Order attribute to and sort which properties to display in what order based on that?
            foreach(var (type, datasetVM) in data)
            {
                chartDataset.Add(datasetVM.Fraction);
            }

            var dataset = _datasets.First(x => x.Dataset.Id == id);
            dataset.DataByProperty = data;

            var color = dataset.Color;
            chartDataset.BackgroundColor = color.ToRGBAString(0.2F);
            chartDataset.BorderColor = color.ToRGBAString();

            chartDataset.Label = dataset.Title;

            _config.Data.Datasets.Add(chartDataset);
        }

        await _chart.Update();
    }

    private List<(string, Color)> GetPropertyDetailsItems(ERocketComparisonProperty propertyType)
    {
        var result = new List<(string, Color)>();
        if (_rocketsComparisonMeta is null)
        {
            return result;
        }

        var unit = propertyType.GetUnit();
        var unitSuffix = !string.IsNullOrEmpty(unit) ? $" {unit}" : string.Empty;
        var valueFormat = "{0:#,0.##}";

        var datasetsByRank = _datasets.Where(x => x.DataByProperty is not null && x.DataByProperty[propertyType].Rank is not null)
            .GroupBy(x => (int)x.DataByProperty![propertyType].Rank!.Value)
            .ToDictionary(k => k.Key, v => v.ToList());

        void AddFromDataset(DatasetDisplay dataset)
        {
            var rankText = dataset.DataByProperty![propertyType].Rank!.Value.ToString("0");
            var valueText = string.Format(valueFormat, dataset.DataByProperty![propertyType].Value.GetValueOrDefault());
            result!.Add(($"#{rankText} - {dataset.Title} - {valueText}" + unitSuffix, dataset.Color));
        }

        for (int i = 0; i < _rocketsComparisonMeta.TopValuesByPropertyType[propertyType].Count; ++i)
        {
            int rank = i + 1;
            if (datasetsByRank.TryGetValue(rank, out var datasets))
            {
                foreach(var dataset in datasets)
                {
                    AddFromDataset(dataset);
                    datasetsByRank.Remove(rank);
                }
            }
            else
            {
                var topValue = _rocketsComparisonMeta.TopValuesByPropertyType[propertyType][i];
                var namesText = topValue.RocketsNames.Count == 1 ? topValue.RocketsNames.First() : topValue.RocketsNames.First() + " & ..."; // TODO: Better display of multiple rockets with same property
                result.Add(($"#{rank} - {namesText} - {string.Format(valueFormat, topValue.Value)}" + unitSuffix, Color.Default));
            }
        }

        foreach(var (rank, datasets) in datasetsByRank.OrderBy(x => x.Key))
        {
            foreach(var dataset in datasets)
            {
                AddFromDataset(dataset);
            }
        }

        return result;
    }
}
