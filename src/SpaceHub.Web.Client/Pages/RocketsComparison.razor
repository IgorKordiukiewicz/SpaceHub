@page "/rockets/comparison"
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.RadarChart;
@using ChartJs.Blazor.Util;
@using MudBlazor
@using SpaceHub.Contracts.Utils;
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components;
@using SpaceHub.Web.Client.Utils;
@using System.Text.Json;
@using System.Text;

@if(_rocketsComparisonMeta is not null)
{
<MudGrid>
    <MudItem xs="12" lg="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudForm Class="gap-4 d-flex flex-wrap mb-4">
                <MudSelect @ref="_groupTypeSelect" T="GroupType" Variant="Variant.Outlined" @bind-Value="@_groupType">
                    <MudSelectItem Value="@GroupType.Individual" />
                    <MudSelectItem Value="@GroupType.Family" />
                    <MudSelectItem Value="@GroupType.All" Disabled="IsGroupTypeAllSelectItemDisabled()" />
                </MudSelect>
                @switch (_groupType)
                {
                    case GroupType.All:
                        break;
                    case GroupType.Family:
                        {
                            <MudAutocomplete @ref="_familyNameAutocomplete" @bind-Value="@_familyName" T="string" Label="Select Family" 
                            SearchFunc="@SearchFamilies"  Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    case GroupType.Individual:
                        {
                            <MudAutocomplete @ref="_rocketNameAutocomplete" @bind-Value="@_rocketName" T="string" Label="Select Rocket" 
                            SearchFunc="@SearchRockets" Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    default:
                        break;
                }
                <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="OnComparisonGroupAdded" Disabled="IsAddingNewComparisonGroupDisabled()">Add</MudButton>
            </MudForm>
            <MudDivider />
            <MudList Clickable="false">
                @foreach (var comparisonGroup in _comparisonGroups)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Circle" IconColor="Color.Primary">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.subtitle1">@GetComparisonGroupTitle(comparisonGroup)</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="(e) => OnDeleteGroupButtonClicked(comparisonGroup, e)"></MudIconButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="9">
        <MudPaper Style="width: 100%; height: 100%;">
            <Chart @ref="_chart" Config="_config"></Chart>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateChart"> <!--TEMPORARY-->
    Update Chart
</MudButton>
}

@code {
    private RocketsComparisonMetaVM? _rocketsComparisonMeta;

    private Chart? _chart;
    private RadarConfig _config = null!;
    private RequestHandler _requestHandler = null!;

    private MudAutocomplete<string>? _familyNameAutocomplete;
    private MudAutocomplete<string>? _rocketNameAutocomplete;
    private MudSelect<GroupType>? _groupTypeSelect;

    private int _maxGroups = 5;

    public enum GroupType
    {
        Individual,
        Family,
        All
    }
    private GroupType _groupType = GroupType.Individual;

    private string? _familyName;
    private List<string> _familiesNames = new();

    private string? _rocketName;
    private List<string> _rocketsNames = new();

    private class ComparisonGroupData // TODO: Change name/reuse models from Contracts
    {
        public GroupType Type { get; set; }

        public string? FamilyName { get; set; }
        public string? RocketName { get; set; }
        public int? RocketId { get; set; }

        public int RocketsCount { get; set; }
    }
    private List<ComparisonGroupData> _comparisonGroups = new();

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        var url = new UrlBuilder("api/rockets/comparison_meta").Url;

        _rocketsComparisonMeta = await _requestHandler.HandleAPIRequest<RocketsComparisonMetaVM>(url);

        if(_rocketsComparisonMeta is not null)
        {
            _familiesNames = _rocketsComparisonMeta.FamilyGroupsWithItemsCount.Select(x => x.Key).ToList();
            _rocketsNames = _rocketsComparisonMeta.RocketNamesWithId.Select(x => x.Key).ToList();
        }

        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new RadarConfig
        {
            Options = new RadarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Scale = new ChartJs.Blazor.Common.Axes.LinearRadialAxis()
                {
                    Ticks = new ChartJs.Blazor.Common.Axes.Ticks.LinearRadialTicks()
                    {
                        Min = 0.0,
                        Max = 1.0
                    }
                },
            }
        };

        // TODO: Prob should be returned in the meta endpoint
        foreach (string label in new[] { "Length", "Diameter", "Launch Cost", "Liftoff Mass", "Liftoff Thrust",
            "LEO Capacity", "GEO Capacity", "Successful Launches", "Launch Success (%)"})
        {
            _config.Data.Labels.Add(label);
        }
    }

    private void OnComparisonGroupAdded()
    {
        if(IsAddingNewComparisonGroupDisabled())
        {
            return;
        }

        var comparisonGroup = new ComparisonGroupData() { Type = _groupType };
        switch(comparisonGroup.Type)
        {
            case GroupType.All:
                {
                    comparisonGroup.RocketsCount = _rocketsComparisonMeta!.TotalCount;

                    _groupTypeSelect!.SelectOption(GroupType.Individual);
                    break;
                }
            case GroupType.Family:
                {
                    comparisonGroup.FamilyName = _familyName;
                    comparisonGroup.RocketsCount = _rocketsComparisonMeta!.FamilyGroupsWithItemsCount.First(x => x.Key == _familyName).Value;

                    _familyNameAutocomplete!.Clear();
                    break;
                }
            case GroupType.Individual:
                {
                    comparisonGroup.RocketName = _rocketName;
                    comparisonGroup.RocketId = _rocketsComparisonMeta!.RocketNamesWithId.First(x => x.Key == _rocketName).Value;

                    _rocketNameAutocomplete!.Clear();
                    break;
                }
            default:
                break;
        }

        _comparisonGroups.Add(comparisonGroup);
    }

    private string GetComparisonGroupTitle(ComparisonGroupData comparisonGroup) => comparisonGroup.Type switch
    {
        GroupType.All => $"All ({comparisonGroup.RocketsCount})",
        GroupType.Family => $"Family: {comparisonGroup.FamilyName} ({comparisonGroup.RocketsCount})",
        GroupType.Individual => $"{comparisonGroup.RocketName}",
    };

    private async Task<IEnumerable<string>> SearchFamilies(string value)
    {
        var filteredNames = _familiesNames.Except(_comparisonGroups.Where(x => x.Type == GroupType.Family).Select(x => x.FamilyName!));

        if(string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchRockets(string value)
    {
        var filteredNames = _rocketsNames.Except(_comparisonGroups.Where(x => x.Type == GroupType.Individual).Select(x => x.RocketName!));

        if (string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void OnDeleteGroupButtonClicked(ComparisonGroupData comparisonGroup, MouseEventArgs e)
    {
        _comparisonGroups.Remove(comparisonGroup);
    }

    private bool IsAddingNewComparisonGroupDisabled()
    {
        if(_rocketsComparisonMeta is null || _groupTypeSelect is null)
        {
            return true;
        }

        var disabledForType = _groupType switch
        {
            GroupType.All => _comparisonGroups.Any(x => x.Type == GroupType.All),
            GroupType.Family => _comparisonGroups.Any(x => x.Type == GroupType.Family && x.FamilyName == _familyName)
                || !_rocketsComparisonMeta.FamilyGroupsWithItemsCount.ContainsKey(_familyName ?? string.Empty)
                || _familyNameAutocomplete is null,
            GroupType.Individual => _comparisonGroups.Any(x => x.Type == GroupType.Individual && x.RocketName == _rocketName)
                || !_rocketsComparisonMeta.RocketNamesWithId.ContainsKey(_rocketName ?? string.Empty)
                || _rocketNameAutocomplete is null,
            _ => true
        };

        return _comparisonGroups.Count >= _maxGroups || disabledForType;
    }

    private bool IsGroupTypeAllSelectItemDisabled() => _comparisonGroups.Any(x => x.Type == GroupType.All);

    private async Task UpdateChart()
    {
        if(_chart is null)
        {
            return;
        }

        var url = new UrlBuilder("api/rockets/comparison").Url;
        var comparisonGroups = new List<ComparisonGroup>();
        foreach(var group in _comparisonGroups)
        {
            ComparisonGroup model = group.Type switch
            {
                GroupType.Individual => new IndividualComparisonGroup() { Id = Guid.NewGuid(), RocketId = group.RocketId!.Value },
                GroupType.Family => new FamilyComparisonGroup() { Id = Guid.NewGuid(), FamilyName = group.FamilyName },
                GroupType.All => new AllComparisonGroup() { Id = Guid.NewGuid() }
            };
            comparisonGroups.Add(model);
        }
        var json = JsonSerializer.Serialize(comparisonGroups);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await _httpClient.PostAsync(url, content);
        var viewModel = await response.Content.ReadFromJsonAsync<RocketsComparisonVM>();

        bool colorTaken = false; // TEMP

        _config.Data.Datasets.Clear();
        foreach(var (id, data) in viewModel.ComparisonGroupsData)
        {
            var dataset = new RadarDataset<double>();
            dataset.Add(data.Length);
            dataset.Add(data.Diameter);
            dataset.Add(data.LaunchCost);
            dataset.Add(data.LiftoffMass);
            dataset.Add(data.LiftoffThrust);
            dataset.Add(data.LeoCapacity);
            dataset.Add(data.GeoCapacity);
            dataset.Add(data.SuccessfulLaunches);
            dataset.Add(data.LaunchSuccess);

            if(colorTaken)
            {
                dataset.BackgroundColor = ColorUtil.ColorString(255, 99, 132, 0.2);
                dataset.BorderColor = ColorUtil.ColorString(255, 99, 132);
            }
            else
            {
                dataset.BackgroundColor = ColorUtil.ColorString(99, 132, 255, 0.2);
                dataset.BorderColor = ColorUtil.ColorString(99, 132, 255);
                colorTaken = true;
            }

            _config.Data.Datasets.Add(dataset);
        }

        await _chart.Update();
    }
}
