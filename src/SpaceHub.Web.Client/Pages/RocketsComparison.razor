@page "/rockets/comparison"
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.Common.Axes;
@using ChartJs.Blazor.Common.Axes.Ticks;
@using ChartJs.Blazor.Common.Enums;
@using ChartJs.Blazor.Common.Handlers;
@using ChartJs.Blazor.Interop;
@using ChartJs.Blazor.RadarChart;
@using ChartJs.Blazor.Util;
@using MudBlazor
@using SpaceHub.Contracts.Enums;
@using SpaceHub.Contracts.Models;
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components;
@using SpaceHub.Web.Client.Utils;
@using System.Text.Json;
@using System.Text;
@using System.Globalization;

@if(_rocketsComparisonMeta is not null)
{
<MudGrid Class="mt-3">
    <MudItem xs="12" lg="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudForm Class="gap-4 d-flex flex-wrap mb-4">
                <MudSelect @ref="_datasetTypeSelect" T="ERocketComparisonDataset" Variant="Variant.Outlined" @bind-Value="@_datasetType">
                    <MudSelectItem Value="@ERocketComparisonDataset.Individual" />
                    <MudSelectItem Value="@ERocketComparisonDataset.Family" />
                    <MudSelectItem Value="@ERocketComparisonDataset.All" Disabled="IsDatasetTypeAllSelectItemDisabled()" />
                </MudSelect>
                @switch (_datasetType)
                {
                        case ERocketComparisonDataset.All:
                        break;
                        case ERocketComparisonDataset.Family:
                        {
                            <MudAutocomplete @ref="_familyNameAutocomplete" @bind-Value="@_familyName" T="string" Label="Select Family" 
                            SearchFunc="@SearchFamilies"  Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                        case ERocketComparisonDataset.Individual:
                        {
                            <MudAutocomplete @ref="_rocketNameAutocomplete" @bind-Value="@_rocketName" T="string" Label="Select Rocket" 
                            SearchFunc="@SearchRockets" Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    default:
                        break;
                }
                <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="OnAddDatasetClicked" Disabled="IsAddingNewDatasetDisabled()">Add</MudButton>
                @if (!IsCurrentDatasetTypeInputValid() && IsLimitOfDatasetsReached())
                {
                    <MudAlert Severity="Severity.Warning" Style="width: 100%;" Dense="true">
                        Reached a maximum of <text>@_maxDatasets</text> datasets
                    </MudAlert>
                }
            </MudForm>
            <MudDivider />
            <MudList Clickable="false">
                @foreach (var dataset in _datasets)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Circle" IconColor="@dataset.Color">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.subtitle1">@dataset.Title</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="(e) => OnDeleteDatasetButtonClicked(dataset, e)"></MudIconButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="9">
        <MudPaper Style="width: 100%; height: 100%;" Class="py-4">
            <Chart @ref="_chart" Config="_config">
            </Chart>
        </MudPaper>
    </MudItem>

    @foreach(var propertyType in Enum.GetValues<ERocketComparisonProperty>())
    {
        <MudItem xs="12" lg="4">
            <MudPaper>
                <MudPaper Style="background-color: var(--mud-palette-dark);">
                        <MudText Typo="Typo.h5" Class="pa-3" Align="Align.Center">@propertyType.ToUserFriendlyString()</MudText>
                </MudPaper>
                <MudTimeline TimelinePosition="TimelinePosition.Start">
                    <MudTimelineItem>
                        <MudText>
                            #1
                        </MudText>
                    </MudTimelineItem>
                    @foreach (var dataset in GetDatasetsOrderedByProperty(propertyType))
                    {
                        @if(dataset.DataByProperty?[propertyType].Rank is not null)
                        {
                            <MudTimelineItem Color="@dataset.Color">
                                <MudText>
                                    @GetPropertyDetailsText(dataset, propertyType)
                                </MudText>
                            </MudTimelineItem>
                        }     
                    }
                    <MudTimelineItem>
                        <MudText>
                            #483 
                        </MudText>
                    </MudTimelineItem>
                </MudTimeline>
            </MudPaper>
        </MudItem>
    }
</MudGrid>
}

@code {
    private RocketsComparisonMetaVM? _rocketsComparisonMeta;

    private Chart? _chart;
    private RadarConfig _config = null!;
    private RequestHandler _requestHandler = null!;

    private MudAutocomplete<string>? _familyNameAutocomplete;
    private MudAutocomplete<string>? _rocketNameAutocomplete;
    private MudSelect<ERocketComparisonDataset>? _datasetTypeSelect;

    private int _maxDatasets = 3;
    private Dictionary<Color, bool> _datasetColorsAvailability = new()
    {
        { Color.Primary, true },
        { Color.Secondary, true },
        { Color.Tertiary, true },
    };

    private ERocketComparisonDataset _datasetType = ERocketComparisonDataset.Individual;

    private string? _familyName;
    private List<string> _familiesNames = new();

    private string? _rocketName;
    private List<string> _rocketsNames = new();

    private class DatasetDisplay
    {
        public required RocketsComparisonDataset Dataset { get; init; }
        public required string Title { get; init; }
        public required Color Color { get; init; }
        public IReadOnlyDictionary<ERocketComparisonProperty, RocketComparisonDatasetVM>? DataByProperty { get; set; }
    }
    private List<DatasetDisplay> _datasets = new();

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        var url = new UrlBuilder("api/rockets/comparison_meta").Url;

        _rocketsComparisonMeta = await _requestHandler.HandleAPIRequest<RocketsComparisonMetaVM>(url);

        if(_rocketsComparisonMeta is not null)
        {
            _familiesNames = _rocketsComparisonMeta.FamilyRocketsCountByName.Select(x => x.Key).ToList();
            _rocketsNames = _rocketsComparisonMeta.RocketIdsByName.Select(x => x.Key).ToList();
        }

        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new RadarConfig
        {
            Options = new RadarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Scale = new LinearRadialAxis
                {
                    Ticks = new LinearRadialTicks
                    {
                        Min = 0.0,
                        Max = 1.0,
                        ShowLabelBackdrop = false,
                        FontColor = ColorUtil.ColorString(150, 150, 150, 0.8),
                        FontSize = 12,
                    },
                    PointLabels = new PointLabels
                    {
                        FontColor = ColorUtil.ColorString(150, 150, 150, 1.0),
                        FontSize = 14,
                    },
                },
                Legend = new Legend
                {
                    Display = false,
                },
                Tooltips = new Tooltips
                {
                    Enabled = false
                },
            },
        };

        foreach (var rocketPropertyType in Enum.GetValues<ERocketComparisonProperty>())
        {
            _config.Data.Labels.Add(rocketPropertyType.ToUserFriendlyString());
        }
    }

    private async Task OnAddDatasetClicked()
    {
        if(IsAddingNewDatasetDisabled())
        {
            return;
        }

        var color = _datasetColorsAvailability.First(x => x.Value).Key;
        _datasetColorsAvailability[color] = false;

        switch (_datasetType)
        {
            case ERocketComparisonDataset.All:
                {
                    var rocketsCount = _rocketsComparisonMeta!.TotalCount;
                    _datasets.Add(new()
                    {
                        Dataset = new AllRocketsComparisonDataset()
                        {
                            Id = Guid.NewGuid()
                        },
                        Title = $"All ({rocketsCount})",
                        Color = color
                    });

                    await _datasetTypeSelect!.SelectOption(ERocketComparisonDataset.Individual);
                    break;
                }
            case ERocketComparisonDataset.Family:
                {
                    var rocketsCount = _rocketsComparisonMeta!.FamilyRocketsCountByName.First(x => x.Key == _familyName).Value;
                    _datasets.Add(new()
                    {
                        Dataset = new FamilyRocketsComparisonDataset()
                        {
                            Id = Guid.NewGuid(),
                            FamilyName = _familyName!
                        },
                        Title = $"Family: {_familyName} ({rocketsCount})",
                        Color = color
                    });

                    await _familyNameAutocomplete!.Clear();
                    _familyName = null;
                    break;
                }
            case ERocketComparisonDataset.Individual:
                {
                    _datasets.Add(new()
                    {
                        Dataset = new IndividualRocketsComparisonDataset()
                        {
                            Id = Guid.NewGuid(),
                            RocketId = _rocketsComparisonMeta!.RocketIdsByName.First(x => x.Key == _rocketName).Value,
                            RocketName = _rocketName!
                        },
                        Title = _rocketName!,
                        Color = color
                    });

                    await _rocketNameAutocomplete!.Clear();
                    _rocketName = null;
                    break;
                }
            default:
                break;
        }

        await UpdateChart();
    }

    private async Task<IEnumerable<string>> SearchFamilies(string value)
    {
        var filteredNames = _familiesNames.Except(_datasets
            .Where(x => x.Dataset.Type == ERocketComparisonDataset.Family)
            .Select(x => (x.Dataset as FamilyRocketsComparisonDataset)!.FamilyName));

        return GetNamesForSearch(filteredNames, value);
    }

    private async Task<IEnumerable<string>> SearchRockets(string value)
    {
        var filteredNames = _rocketsNames.Except(_datasets
            .Where(x => x.Dataset.Type == ERocketComparisonDataset.Individual)
            .Select(x => (x.Dataset as IndividualRocketsComparisonDataset)!.RocketName));

        return GetNamesForSearch(filteredNames, value);
    }

    private IEnumerable<string> GetNamesForSearch(IEnumerable<string> filteredNames, string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task OnDeleteDatasetButtonClicked(DatasetDisplay dataset, MouseEventArgs e)
    {
        _datasetColorsAvailability[dataset.Color] = true;
        _datasets.Remove(dataset);

        await UpdateChart();
    }

    private bool IsAddingNewDatasetDisabled()
    {
        return IsLimitOfDatasetsReached() || IsCurrentDatasetTypeInputValid();
    }

    private bool IsLimitOfDatasetsReached()
    {
        return _datasets.Count >= _maxDatasets;
    }

    private bool IsCurrentDatasetTypeInputValid()
    {
        if (_rocketsComparisonMeta is null || _datasetTypeSelect is null)
        {
            return true;
        }

        return _datasetType switch
        {
            ERocketComparisonDataset.All => _datasets.Any(x => x.Dataset.Type == ERocketComparisonDataset.All),
            ERocketComparisonDataset.Family => _datasets.Any(x => (x.Dataset as FamilyRocketsComparisonDataset)?.FamilyName == _familyName)
                || !_rocketsComparisonMeta.FamilyRocketsCountByName.ContainsKey(_familyName ?? string.Empty)
                || _familyNameAutocomplete is null,
            ERocketComparisonDataset.Individual => _datasets.Any(x => (x.Dataset as IndividualRocketsComparisonDataset)?.RocketName == _rocketName)
                || !_rocketsComparisonMeta.RocketIdsByName.ContainsKey(_rocketName ?? string.Empty)
                || _rocketNameAutocomplete is null,
            _ => true
        };
    }

    private bool IsDatasetTypeAllSelectItemDisabled() => _datasets.Any(x => x.Dataset.Type == ERocketComparisonDataset.All);

    private async Task UpdateChart()
    {
        if(_chart is null)
        {
            return;
        }

        var url = new UrlBuilder("api/rockets/comparison").Url;
        var chartVM = await _requestHandler.HandleAPIRequest<RocketsComparisonVM, IEnumerable<RocketsComparisonDataset>>(url, _datasets.Select(x => x.Dataset));
        if(chartVM is null)
        {
            return;
        }

        _config.Data.Datasets.Clear();
        foreach(var (id, data) in chartVM.DatasetsById)
        {
            var chartDataset = new RadarDataset<double>();
            // TODO: Add Order attribute to and sort properties based on that?
            foreach(var (type, datasetVM) in data)
            {
                chartDataset.Add(datasetVM.Fraction);
            }

            var dataset = _datasets.First(x => x.Dataset.Id == id);
            dataset.DataByProperty = data;

            var color = dataset.Color;
            chartDataset.BackgroundColor = color.ToRGBAString(0.2F);
            chartDataset.BorderColor = color.ToRGBAString();

            chartDataset.Label = dataset.Title;

            _config.Data.Datasets.Add(chartDataset);
        }

        await _chart.Update();
    }

    private string GetPropertyDetailsText(DatasetDisplay dataset, ERocketComparisonProperty propertyType)
    {
        if(dataset.DataByProperty is null)
        {
            return string.Empty;
        }

        var rankText = dataset.DataByProperty[propertyType].Rank.GetValueOrDefault().ToString("F0");
        var valueText = dataset.DataByProperty[propertyType].Value.GetValueOrDefault().ToString("F1");
        return $"#{rankText} - {dataset.Title} - {valueText}";
    }

    private List<DatasetDisplay> GetDatasetsOrderedByProperty(ERocketComparisonProperty propertyType)
    {
        if(_datasets.Any(x => x.DataByProperty is null))
        {
            return _datasets;
        }

        return _datasets.OrderBy(x => x.DataByProperty![propertyType].Rank).ToList();
    }
}
