@page "/rockets/comparison"
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@using ChartJs.Blazor
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.RadarChart;
@using ChartJs.Blazor.Util;
@using MudBlazor
@using SpaceHub.Contracts.Enums;
@using SpaceHub.Contracts.Utils;
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components;
@using SpaceHub.Web.Client.Utils;
@using System.Text.Json;
@using System.Text;
@using System.Globalization;

@if(_rocketsComparisonMeta is not null)
{
<MudGrid>
    <MudItem xs="12" lg="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudForm Class="gap-4 d-flex flex-wrap mb-4">
                <MudSelect @ref="_groupTypeSelect" T="EComparisonGroup" Variant="Variant.Outlined" @bind-Value="@_groupType">
                    <MudSelectItem Value="@EComparisonGroup.Individual" />
                    <MudSelectItem Value="@EComparisonGroup.Family" />
                    <MudSelectItem Value="@EComparisonGroup.All" Disabled="IsGroupTypeAllSelectItemDisabled()" />
                </MudSelect>
                @switch (_groupType)
                {
                        case EComparisonGroup.All:
                        break;
                        case EComparisonGroup.Family:
                        {
                            <MudAutocomplete @ref="_familyNameAutocomplete" @bind-Value="@_familyName" T="string" Label="Select Family" 
                            SearchFunc="@SearchFamilies"  Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                        case EComparisonGroup.Individual:
                        {
                            <MudAutocomplete @ref="_rocketNameAutocomplete" @bind-Value="@_rocketName" T="string" Label="Select Rocket" 
                            SearchFunc="@SearchRockets" Clearable="true" ResetValueOnEmptyText="true" FullWidth="true" />
                            break;
                        }
                    default:
                        break;
                }
                <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="OnComparisonGroupAdded" Disabled="IsAddingNewComparisonGroupDisabled()">Add</MudButton>
            </MudForm>
            <MudDivider />
            <MudList Clickable="false">
                @foreach (var comparisonGroup in _comparisonGroups2)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Circle" IconColor="@comparisonGroup.Color">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.subtitle1">@comparisonGroup.Title</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="(e) => OnDeleteGroupButtonClicked(comparisonGroup, e)"></MudIconButton>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" lg="9">
        <MudPaper Style="width: 100%; height: 100%;">
            <Chart @ref="_chart" Config="_config"></Chart>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="UpdateChart"> <!--TEMPORARY-->
    Update Chart
</MudButton>
}

@code {
    private RocketsComparisonMetaVM? _rocketsComparisonMeta;

    private Chart? _chart;
    private RadarConfig _config = null!;
    private RequestHandler _requestHandler = null!;

    private MudAutocomplete<string>? _familyNameAutocomplete;
    private MudAutocomplete<string>? _rocketNameAutocomplete;
    private MudSelect<EComparisonGroup>? _groupTypeSelect;

    private int _maxGroups = 3;
    private Dictionary<Color, bool> _groupColorsAvailability = new()
    {
        { Color.Primary, true },
        { Color.Secondary, true },
        { Color.Tertiary, true },
    };

    private EComparisonGroup _groupType = EComparisonGroup.Individual;

    private string? _familyName;
    private List<string> _familiesNames = new();

    private string? _rocketName;
    private List<string> _rocketsNames = new();

    private class ComparisonGroupDisplay
    {
        public required ComparisonGroup Group { get; init; }
        public required string Title { get; init; }
        public required Color Color { get; init; }
    }
    private List<ComparisonGroupDisplay> _comparisonGroups2 = new();

    protected override async Task OnInitializedAsync()
    {
        _requestHandler = new(_httpClient, _dialogService);
        var url = new UrlBuilder("api/rockets/comparison_meta").Url;

        _rocketsComparisonMeta = await _requestHandler.HandleAPIRequest<RocketsComparisonMetaVM>(url);

        if(_rocketsComparisonMeta is not null)
        {
            _familiesNames = _rocketsComparisonMeta.FamilyGroupsWithItemsCount.Select(x => x.Key).ToList();
            _rocketsNames = _rocketsComparisonMeta.RocketNamesWithId.Select(x => x.Key).ToList();
        }

        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new RadarConfig
        {
            Options = new RadarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Scale = new ChartJs.Blazor.Common.Axes.LinearRadialAxis()
                {
                    Ticks = new ChartJs.Blazor.Common.Axes.Ticks.LinearRadialTicks()
                    {
                        Min = 0.0,
                        Max = 1.0
                    }
                },
            }
        };

        // TODO: Prob should be returned in the meta endpoint
        foreach (string label in new[] { "Length", "Diameter", "Launch Cost", "Liftoff Mass", "Liftoff Thrust",
            "LEO Capacity", "GEO Capacity", "Successful Launches", "Launch Success (%)"})
        {
            _config.Data.Labels.Add(label);
        }
    }

    private void OnComparisonGroupAdded()
    {
        if(IsAddingNewComparisonGroupDisabled())
        {
            return;
        }

        var color = _groupColorsAvailability.First(x => x.Value).Key;
        _groupColorsAvailability[color] = false;

        switch (_groupType)
        {
            case EComparisonGroup.All:
                {
                    var rocketsCount = _rocketsComparisonMeta!.TotalCount;
                    _comparisonGroups2.Add(new()
                    {
                        Group = new AllComparisonGroup()
                        {
                            Id = Guid.NewGuid()
                        },
                        Title = $"All ({rocketsCount})",
                        Color = color
                    });

                    _groupTypeSelect!.SelectOption(EComparisonGroup.Individual);
                    break;
                }
            case EComparisonGroup.Family:
                {
                    var rocketsCount = _rocketsComparisonMeta!.FamilyGroupsWithItemsCount.First(x => x.Key == _familyName).Value;
                    _comparisonGroups2.Add(new()
                    {
                        Group = new FamilyComparisonGroup()
                        {
                            Id = Guid.NewGuid(),
                            FamilyName = _familyName!
                        },
                        Title = $"Family: {_familyName} ({rocketsCount})",
                        Color = color
                    });

                    _familyNameAutocomplete!.Clear();
                    break;
                }
            case EComparisonGroup.Individual:
                {
                    _comparisonGroups2.Add(new()
                    {
                        Group = new IndividualComparisonGroup()
                        {
                            Id = Guid.NewGuid(),
                            RocketId = _rocketsComparisonMeta!.RocketNamesWithId.First(x => x.Key == _rocketName).Value,
                            RocketName = _rocketName!
                        },
                        Title = _rocketName!,
                        Color = color
                    });

                    _rocketNameAutocomplete!.Clear();
                    break;
                }
            default:
                break;
        }
    }

    private async Task<IEnumerable<string>> SearchFamilies(string value)
    {
        var filteredNames = _familiesNames.Except(_comparisonGroups2.Where(x => x.Group.Type == EComparisonGroup.Family).Select(x => (x.Group as FamilyComparisonGroup)!.FamilyName));

        if(string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchRockets(string value)
    {
        var filteredNames = _rocketsNames.Except(_comparisonGroups2.Where(x => x.Group.Type == EComparisonGroup.Individual).Select(x => (x.Group as IndividualComparisonGroup)!.RocketName));

        if (string.IsNullOrEmpty(value))
        {
            return filteredNames;
        }

        return filteredNames.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    private void OnDeleteGroupButtonClicked(ComparisonGroupDisplay comparisonGroup, MouseEventArgs e)
    {
        _groupColorsAvailability[comparisonGroup.Color] = true;
        _comparisonGroups2.Remove(comparisonGroup);
    }

    private bool IsAddingNewComparisonGroupDisabled()
    {
        if(_rocketsComparisonMeta is null || _groupTypeSelect is null)
        {
            return true;
        }

        var disabledForType = _groupType switch
        {
            EComparisonGroup.All => _comparisonGroups2.Any(x => x.Group.Type == EComparisonGroup.All),
            EComparisonGroup.Family => _comparisonGroups2.Any(x => x.Group.Type == EComparisonGroup.Family && (x.Group as FamilyComparisonGroup)!.FamilyName == _familyName)
                || !_rocketsComparisonMeta.FamilyGroupsWithItemsCount.ContainsKey(_familyName ?? string.Empty)
                || _familyNameAutocomplete is null,
            EComparisonGroup.Individual => _comparisonGroups2.Any(x => x.Group.Type == EComparisonGroup.Individual && (x.Group as IndividualComparisonGroup)!.RocketName == _rocketName)
                || !_rocketsComparisonMeta.RocketNamesWithId.ContainsKey(_rocketName ?? string.Empty)
                || _rocketNameAutocomplete is null,
            _ => true
        };

        return _comparisonGroups2.Count >= _maxGroups || disabledForType;
    }

    private bool IsGroupTypeAllSelectItemDisabled() => _comparisonGroups2.Any(x => x.Group.Type == EComparisonGroup.All);

    private async Task UpdateChart()
    {
        if(_chart is null)
        {
            return;
        }

        var url = new UrlBuilder("api/rockets/comparison").Url;
        var json = JsonSerializer.Serialize(_comparisonGroups2.Select(x => x.Group));
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await _httpClient.PostAsync(url, content);
        var viewModel = await response.Content.ReadFromJsonAsync<RocketsComparisonVM>();

        _config.Data.Datasets.Clear();
        foreach(var (id, data) in viewModel.ComparisonGroupsData)
        {
            var dataset = new RadarDataset<double>();
            dataset.Add(data.Length);
            dataset.Add(data.Diameter);
            dataset.Add(data.LaunchCost);
            dataset.Add(data.LiftoffMass);
            dataset.Add(data.LiftoffThrust);
            dataset.Add(data.LeoCapacity);
            dataset.Add(data.GeoCapacity);
            dataset.Add(data.SuccessfulLaunches);
            dataset.Add(data.LaunchSuccess);

            var comparisonGroup = _comparisonGroups2.First(x => x.Group.Id == id);
            var color = comparisonGroup.Color;
            dataset.BackgroundColor = ColorToString(color, 0.2F);
            dataset.BorderColor = ColorToString(color, 1.0F);

            dataset.Label = comparisonGroup.Title;

            _config.Data.Datasets.Add(dataset);
        }

        await _chart.Update();
    }

    private static string ColorToString(Color color, float alpha)
    {
        var alphaStr = alpha.ToString("0.0#", CultureInfo.InvariantCulture);
        return color switch
        {
            Color.Primary => $"rgba(119, 107, 231, {alphaStr})",
            Color.Secondary => $"rgba(255, 64, 129, {alphaStr})",
            Color.Tertiary => $"rgba(30, 200, 165, {alphaStr})",
            _ => "rgba(255, 255, 255, 1.0)"
        };
    }
}
