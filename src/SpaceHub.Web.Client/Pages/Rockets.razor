@page "/rockets"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components
@using SpaceHub.Web.Client.Utils;
@using System.Net;

@if(_viewModel is not null)
{
    <MudGrid Class="d-flex align-stretch">
        <MudItem xs="12">
            <MudTextField Label="Search" T="string" TextChanged="OnSearchChanged"
                      Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>

        @foreach(var rocket in _viewModel.Rockets)
        {
            <RocketCard Rocket="@rocket" Nested="@false"/>
        }
    </MudGrid>

    <Pagination PagesCount="@_viewModel.TotalPagesCount" PageChanged="UpdateRockets" @ref="_paginationComponent" />
}

@code {
    // TODO: Add default ctor or default values for View Models so they don't have to be nullable in Client
    private RocketsVM? _viewModel;

    private string _searchValue = string.Empty;
    private Pagination _paginationComponent = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateRockets();
    }

    private async Task UpdateRockets()
    {
        var url = new UrlBuilder("api/rockets")
            .AddParameter("searchValue", _searchValue)
            .AddParameters(_paginationComponent.GetQueryParameters())
            .Url;
        var response = await _httpClient.GetAsync(url);
        // TODO: Extract api requests and response handling to helper class/component
        if(response.IsSuccessStatusCode)
        {
            _viewModel = await response.Content.ReadFromJsonAsync<RocketsVM>();
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            // TODO: Bad request - pop-up or ?
        }
    }

    private async Task OnSearchChanged(string searchValue)
    {
        _searchValue = searchValue;
        await UpdateRockets();
    }
}
