@page "/news"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@using MudBlazor
@using SpaceHub.Contracts.ViewModels;
@using SpaceHub.Web.Client.Components
@using SpaceHub.Web.Client.Utils;
@using System.Net;

@if(_viewModel is not null)
{
    <MudGrid Class="d-flex align-stretch">
        <MudItem xs="12">
            <MudTextField Label="Search" T="string" TextChanged="OnSearchChanged"
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        </MudItem>

        @foreach (var article in _viewModel.Articles)
        {
            <MudItem md="6" xs="12">
                <MudPaper Height="100%">
                    <MudLink Href="@article.Url" Underline="Underline.None" Target="_blank">
                        <MudCard Height="100%" Class="d-flex flex-column">
                            <MudCardMedia Image="@article.ImageUrl" />
                            <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="py-2 px-4">@article.Title</MudText>
                            <MudText Typo="Typo.body2" Align="Align.Center" Class="px-4">@article.Summary</MudText>
                            <div class="mt-auto pt-4">
                                <MudDivider />
                                <MudContainer Class="d-flex justify-space-between py-2">
                                    <MudText Typo="Typo.body2">@article.NewsSite</MudText>
                                    <MudText Typo="Typo.body2">@article.PublishDate.ToString("D")</MudText>
                                </MudContainer>
                            </div>
                        </MudCard>
                    </MudLink>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <Pagination PagesCount="@_viewModel.TotalPagesCount" PageChanged="UpdateArticles" @ref="_paginationComponent" />
}

@code {
    private ArticlesVM? _viewModel;

    private string _searchValue = string.Empty;
    private Pagination _paginationComponent = new();

    protected override async Task OnInitializedAsync()
    {
        await UpdateArticles();
    }

    private async Task UpdateArticles()
    {
        var url = new UrlBuilder("api/articles")
            .AddParameter("searchValue", _searchValue)
            .AddParameters(_paginationComponent.GetQueryParameters())
            .Url;
        var response = await _httpClient.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            _viewModel = await _httpClient.GetFromJsonAsync<ArticlesVM>(url);
        }
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            // TODO: Bad request - pop-up or ?
        }
    }

    private async Task OnSearchChanged(string searchValue)
    {
        _searchValue = searchValue;
        await UpdateArticles();
    }
}
